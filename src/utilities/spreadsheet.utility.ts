import { google, sheets_v4 } from "googleapis";
import { JWT } from "google-auth-library";

interface SpreadsheetConfig {
    spreadsheetId: string;
    clientEmail: string;
    privateKey: string;
    keyId: string;
}

export default class GoogleSpreadsheet {
    private sheets: sheets_v4.Sheets;
    private auth: JWT;

    constructor(private config: SpreadsheetConfig) {
        this.auth = new google.auth.JWT({
            email: config.clientEmail,
            key: config.privateKey,
            keyId: config.keyId,
            scopes: ["https://www.googleapis.com/auth/spreadsheets"],
        });

        this.sheets = google.sheets({ version: "v4", auth: this.auth });
    }

    async getSheetMetadata() {
        try {
            return await this.sheets.spreadsheets.get({
                spreadsheetId: this.config.spreadsheetId,
            });
        } catch (err) {
            console.log(err);
        }
    }

    async createSheetOrTab(name: string) {
        let create = false;
        try {
            await this.getSheetData(`${name}!A1:A1`);
        } catch {
            create = true;
        }

        if (!create) return true;

        try {
            await this.sheets.spreadsheets.batchUpdate({
                spreadsheetId: this.config.spreadsheetId,
                requestBody: {
                    requests: [
                        {
                            addSheet: {
                                properties: {
                                    title: name,
                                },
                            },
                        },
                    ],
                },
            });

            this.updateSheetData(`${name}!A1:2`, [
                [
                    "AUTO GENERATED BY BOT. DO NOT TOUCH IF YOU KNOW NOTHING."
                ],
                [
                    "Timestamps",
                    "DiscordId",
                    "DiscordUsername",
                    "OsuUserId",
                    "OsuUsername",
                ],
            ])
                .then(() => {})
                .catch((err) => {console.log(err)});

            return true;
        } catch (err) {
            console.log(err);
        }
        return false;
    }

    async getSheetData(range: string) {
        try {
            const result = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.config.spreadsheetId,
                range,
            });
            return result.data.values;
        } catch (error) {
            console.error("Error fetching data:", error);
            throw error;
        }
    }

    async updateSheetData(range: string, values: any[][]) {
        try {
            await this.sheets.spreadsheets.values.update({
                spreadsheetId: this.config.spreadsheetId,
                range,
                valueInputOption: "RAW",
                requestBody: {
                    values,
                },
            });
        } catch (error) {
            console.error("Error updating data:", error);
            throw error;
        }
    }
}
